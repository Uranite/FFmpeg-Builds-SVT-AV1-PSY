diff --git a/libavcodec/libaomenc.c b/libavcodec/libaomenc.c
index 0f7571ee7a..b1b658b248 100644
--- a/libavcodec/libaomenc.c
+++ b/libavcodec/libaomenc.c
@@ -686,6 +686,11 @@ static av_cold int aom_init(AVCodecContext *avctx,
     aom_img_fmt_t img_fmt;
     aom_codec_caps_t codec_caps = aom_codec_get_caps(iface);
 
+    if (ctx->tune == AOM_TUNE_IQ) {
+        ctx->still_picture = 1;
+        ctx->usage = AOM_USAGE_ALL_INTRA;
+    }
+
     av_log(avctx, AV_LOG_INFO, "%s\n", aom_codec_version_str());
     av_log(avctx, AV_LOG_VERBOSE, "%s\n", aom_codec_build_config());
 
@@ -1506,6 +1511,7 @@ static const AVOption options[] = {
     { "tune",            "The metric that the encoder tunes for. Automatically chosen by the encoder by default", OFFSET(tune), AV_OPT_TYPE_INT, {.i64 = -1}, -1, AOM_TUNE_SSIM, VE, .unit = "tune"},
     { "psnr",            NULL,         0, AV_OPT_TYPE_CONST, {.i64 = AOM_TUNE_PSNR}, 0, 0, VE, .unit = "tune"},
     { "ssim",            NULL,         0, AV_OPT_TYPE_CONST, {.i64 = AOM_TUNE_SSIM}, 0, 0, VE, .unit = "tune"},
+    { "iq",              "Tune for image quality (for still-image/all-intra coding)", 0, AV_OPT_TYPE_CONST, {.i64 = AOM_TUNE_IQ}, 0, 0, VE, .unit = "tune"},
     FF_AV1_PROFILE_OPTS
     { "still-picture", "Encode in single frame mode (typically used for still AVIF images).", OFFSET(still_picture), AV_OPT_TYPE_BOOL, {.i64 = 0}, -1, 1, VE },
     { "dolbyvision",     "Enable Dolby Vision RPU coding", OFFSET(dovi.enable), AV_OPT_TYPE_BOOL, {.i64 = FF_DOVI_AUTOMATIC }, -1, 1, VE, .unit = "dovi" },
@@ -1581,4 +1587,4 @@ FFCodec ff_libaom_av1_encoder = {
                       FF_CODEC_CAP_AUTO_THREADS,
     .defaults       = defaults,
     .get_supported_config = av1_get_supported_config,
-};
+};
\ No newline at end of file
diff --git a/libavcodec/libsvtav1.c b/libavcodec/libsvtav1.c
index 43fe531fde..8b1d4587d1 100644
--- a/libavcodec/libsvtav1.c
+++ b/libavcodec/libsvtav1.c
@@ -69,7 +69,7 @@ typedef struct SvtContext {
     // User options.
     AVDictionary *svtav1_opts;
     int enc_mode;
-    int crf;
+    float crf;
     int qp;
 } SvtContext;
 
@@ -205,6 +205,7 @@ static void handle_side_data(AVCodecContext *avctx,
     }
 }
 
+#define MAX_QP_VALUE 63
 static int config_enc_params(EbSvtAv1EncConfiguration *param,
                              AVCodecContext *avctx)
 {
@@ -213,7 +214,7 @@ static int config_enc_params(EbSvtAv1EncConfiguration *param,
     const AVDictionaryEntry av_unused *en = NULL;
 
     // Update param from options
-    if (svt_enc->enc_mode >= -1)
+    if (svt_enc->enc_mode >= -3)
         param->enc_mode             = svt_enc->enc_mode;
 
     if (avctx->bit_rate) {
@@ -233,8 +234,12 @@ static int config_enc_params(EbSvtAv1EncConfiguration *param,
             FFMAX(avctx->bit_rate, avctx->rc_max_rate);
 
     if (svt_enc->crf > 0) {
-        param->qp                   = svt_enc->crf;
+        param->qp                   = FFMIN(MAX_QP_VALUE, (uint32_t)svt_enc->crf);
         param->rate_control_mode    = 0;
+
+        // Calculate the quarter-step offset
+        uint32_t extended_q_index   = (uint32_t)(svt_enc->crf * 4);
+        param->extended_crf_qindex_offset = extended_q_index - param->qp * 4;
     } else if (svt_enc->qp > 0) {
         param->qp                   = svt_enc->qp;
         param->rate_control_mode    = 0;
@@ -698,7 +703,7 @@ static av_cold int eb_enc_close(AVCodecContext *avctx)
 #define VE AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_ENCODING_PARAM
 static const AVOption options[] = {
     { "preset", "Encoding preset",
-      OFFSET(enc_mode), AV_OPT_TYPE_INT, { .i64 = -2 }, -2, MAX_ENC_PRESET, VE },
+      OFFSET(enc_mode), AV_OPT_TYPE_INT, { .i64 = -4 }, -4, MAX_ENC_PRESET, VE },
 
     FF_AV1_PROFILE_OPTS
 
@@ -730,8 +735,8 @@ static const AVOption options[] = {
         { LEVEL("7.3", 73) },
 #undef LEVEL
 
-    { "crf", "Constant Rate Factor value", OFFSET(crf),
-      AV_OPT_TYPE_INT, { .i64 = 0 }, 0, 63, VE },
+    { "crf", "Constant Rate Factor value (can use quarter-step increments)",
+      OFFSET(crf), AV_OPT_TYPE_FLOAT, { .dbl = 0 }, 0, 70, VE },
     { "qp", "Initial Quantizer level value", OFFSET(qp),
       AV_OPT_TYPE_INT, { .i64 = 0 }, 0, 63, VE },
     { "svtav1-params", "Set the SVT-AV1 configuration using a :-separated list of key=value parameters", OFFSET(svtav1_opts), AV_OPT_TYPE_DICT, { 0 }, 0, 0, VE },
